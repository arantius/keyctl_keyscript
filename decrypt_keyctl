#!/bin/sh
# decrypt_keyctl - to use in /etc/crypttab as keyscript
#  Allows to cache passwords for cryptdevices for 60s
#  The same password is used for for cryptdevices with the same identifier.
#  The keyfile parameter, which is the third field from /etc/crypttab, is
#  used as identifier in this keyscript.
#
# sample crypttab entries:
# test1   /dev/loop1    test_pw         luks,keyscript=decrypt_keyctl
# test2   /dev/loop2    test_pw         luks,keyscript=decrypt_keyctl
# test3   /dev/loop3    test_other_pw   luks,keyscript=decrypt_keyctl
#
#  test1 and test2 have the same identifier thus test2 does not need a password
#  typed in manually

die()
{
    echo "$@" >&2
    exit 1
}

# the keyfile given from crypttab is used as identifier in the keyring
# including the prefix "cryptkey-"
ID_="cryptkey-$1"
TIMEOUT_='60'
ASKPASS_='/lib/cryptsetup/askpass'
USE_ASKPASS_='false'
PROMPT_="Caching passphrase for ${CRYPTTAB_SOURCE}: "

test -x "$ASKPASS_" && USE_ASKPASS_='true'

KID_=$(keyctl search @u user "$ID_" 2>/dev/null)
if [ $? -ne 0 -a -z "$KID_" ]; then
    # key not found, ask the user
    if [ "$USE_ASKPASS_" -eq 'true' ]; then
        KEY_=$($ASKPASS_ "$PROMPT_") || die "Error executing $ASKPASS_"
    else
        echo -n "$PROMPT_" >&2
        if ! read -res KEY_; then
            die "Error reading key from /dev/stdin"
        else
            echo >&2
        fi
    fi
    KID_=$(echo -n "$KEY_" |keyctl padd user "$ID_" @u)
    [ -z "$KID_" ] && die "Error adding passphrase to kernel keyring"
    if ! keyctl timeout $KID_ $TIMEOUT_; then
        keyctl unlink $KID_ @u
        die "Error setting timeout on key ($KID_), removing"
    fi
else
    echo "Using cached passphrase for ${CRYPTTAB_SOURCE}." >&2
fi
keyctl pipe $KID_
